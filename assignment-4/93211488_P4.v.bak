module fp_adder
    (
        input [31:0] a,
        input [31:0] b,
        output [31:0] s
    );
	wire s1, s2;
	wire [7:0] e1, e2, corrected_e1, corrected_e2;
	wire [22:0] f1, f2;
	wire [23:0] complete_f1, complete_f2, max_exp, min_exp;
	wire [26:0] op1, op2;
	wire [27:0]	sum;
	
	assign {s1, e1, f1} = a;
	assign {s2, e2, f2} = b; 
	
	assign corrected_e1 = (e1 == 23'b0)? 23'b1 : e1;
	assign corrected_e2 = (e2 == 23'b0)? 23'b1 : e2;
	
	wire borrow, add_sub;
	
	assign borrow = (corrected_e1 < corrected_e2);
	
	assign complete_f1 = (e1 == 23'b0)? {1'b0, f1} : {1'b1, f1};
	assign complete_f2 = (e2 == 23'b0)? {1'b0, f2} : {1'b1, f2};
	
	assign max_exp = (borrow)? corrected_e2 : corrected_e1;
	assign min_exp = (borrow)? corrected_e1 : corrected_e2;
	
	assign add_sub = (s1 ^ s2);//0 for ADD, 1 for SUB
	
	assign op1 = {complete_f1, 3'b0};
	
	barrel_shifter
	(
	corrected_e1,
	corrected_e2,
	complete_f2,
	borrow,
	op2
	);
	
	assign sum = (add_sub)? op1 - op2:op1 + op2;
	
endmodule	
module barrel_shifter
(
	e1,
	e2,
	frac_in,
	borrow,
	frac_out
);
	input [7:0] e1, e2;
	input borrow;
	input [23:0] frac_in;
	output [26:0] frac_out;
	
	wire [7:0] diff;
	wire [4:0] shift_amount;
	wire [23:-28] pre_shift, post_shift;
	
	assign diff = (borrow)? e2 - e1 : e1 - e2;
	assign shift_amount = (diff > 26)? 5'd26:diff;
	
	assign pre_shift = {frac_in, 28'b0};
	assign post_shift = (pre_shift >> shift_amount);
	assign frac_out [26:1] = post_shift[23:-2];
	assign frac_out [0] = |(post_shift[-3:-28]);
	
endmodule	
module normalizer(
	frac_in,
	exp_in,
	frac_out,
	exp_out
);
	input [1:-25] frac_in;
	input [7:0] exp_in;
	output [23:-3] frac_out;
	output [7:0] exp_out;
	
	wire signed [5:0] shift_amount;
	
	exp_generator eg(
	exp_in,
	frac_in[1:-24],
	shift_amount,
	exp_out
);
	assign frac_out ={(shift_amount == -1)?(frac_in[1:-24] >> 1):(shift_amount == 0)? frac_in[1:-24] :( frac_in[1:-24]  << (shift_amount)), frac_in[0]};
endmodule

module exp_generator(
	exp_in,
	frac_in,
	shift_amount,
	exp_out
);
	input [7:0] exp_in;
	input [1:-24] frac_in;
	output [7:0] exp_out;
	output signed [5:0] shift_amount;
	
	wire signed [5:0]x[1:-25];
	
	genvar cnt;
	assign x[-25] = {1'b0, (~5'd0)};
	generate
		for (cnt = -24; cnt <= 1; cnt = cnt + 1)begin:oring
			assign x[cnt] = (frac_in[cnt])? (-cnt):x[cnt - 1];
		end
	endgenerate
	assign shift_amount = ( exp_in < shift_amount)?exp_in:x[1];
	
	assign exp_out = ( exp_in < shift_amount || shift_amount == {1'b0, (~5'd0)})? 8'd0: exp_in - shift_amount;
endmodule	
module rounder(
	frac_in,
	frac_out
);
	input [23:-3] frac_in;
	output [23:-3] frac_out; 
	
	wire [-1:-3] x = frac_in[-1:-3]:
	
	assign frac_out = (x < 3'b100)? frac_in: (x > 3'b100)? {frac_in[23:0] + 1'b1, 3'b0}:(frac_in[0])?{frac_in[23:0] + 1'b1, 3'b0}:{frac_in[23:0], 3'b0}

endmodule